C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/08/2021 22:33:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HW_GTIMER
OBJECT MODULE PLACED IN .\Objects\hw_Gtimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\ESC51_sdk\HW_Support\hw_Gtimer.c LARGE OPTIMIZE(8,SPEED) BROWSE IN
                    -CDIR(..\..\ESC51_sdk\es_sdkstatrt;..\..\ESC51_sdk\HW_Driver\header;..\..\ESC51_sdk\HW_Support\header;..\..\ESC51_sdk\SW_
                    -Support\header;..\..\ESC51_project;..\..\ESC51_sdk) DEBUG OBJECTEXTEND PRINT(.\Listings\hw_Gtimer.lst) OBJECT(.\Objects\
                    -hw_Gtimer.obj)

line level    source

   1          #include "hw_Gtimer.h"
   2          
   3          #ifdef GTIMER_CONFIG
   4          
   5          
   6          /* ------------------------------------------------------------ */
   7          
   8          static __GTimerOBJ    *GTimer_Head = NULL;
   9          
  10          
  11          
  12          
  13          
  14          
  15          static char GTimer_function (void *arg) 
  16          {
  17   1              void *ptr = arg;
  18   1      
  19   1              static __GTimerOBJ *head = NULL;
  20   1              head = GTimer_Head;
  21   1              while (head != NULL)
  22   1              {
  23   2                      if (head->status == 2) {
  24   3                              head->member_func_pointer(head->member_func_arg);
  25   3                      }
  26   2                      head = head->next;
  27   2              }
  28   1      
  29   1              return 0;
  30   1      }
  31          
  32          
  33          
  34          
  35          
  36          /* ------------------------------------------------------------ */
  37          
  38          void GTimer_Init (void)
  39          {
  40   1              GTimer_Head = NULL;
  41   1              Timer2Init(TIMER2_MODE_TIMING, 10000, GTimer_function);
  42   1      }
  43          
  44          void GTimer_Start (void)
  45          {
  46   1              
  47   1      }
  48          
  49          void GTimer_Stop (void)
  50          {
  51   1              
  52   1      }
C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/08/2021 22:33:46 PAGE 2   

  53          
  54          
  55          
  56          
  57          
  58          char GTimer_OBJJoin (__GTimerOBJ* GTimerobj)
  59          {
  60   1              __GTimerOBJ* head = GTimer_Head;
  61   1      
  62   1              if (GTimer_Head == NULL) {
  63   2                      GTimerobj->ID     = 0;
  64   2                      GTimerobj->status = 1;
  65   2                      GTimerobj->next   = NULL;
  66   2                      GTimer_Head       = GTimerobj;
  67   2                      return 0;
  68   2              }
  69   1              while (head->next != NULL)
  70   1              {
  71   2                      head = head->next;
  72   2              }
  73   1              GTimerobj->ID     = head->ID + 1;
  74   1              GTimerobj->status = 1;
  75   1              GTimerobj->next   = NULL;
  76   1              head->next        = GTimerobj;
  77   1      
  78   1              return 0;
  79   1      }
  80          
  81          
  82          
  83          char GTimer_OBJRemove (__GTimerOBJ* GTimerobj)
  84          {
  85   1              __GTimerOBJ* head = GTimer_Head;
  86   1              __GTimerOBJ* pre  = GTimer_Head;
  87   1      
  88   1              if (GTimer_Head == NULL) {
  89   2                      return -1;
  90   2              } else if (GTimer_Head->ID == GTimerobj->ID) {
  91   2                      GTimer_Head = GTimer_Head->next;
  92   2                      return 0;
  93   2              } else {
  94   2                      pre  = head;
  95   2                      head = head->next;
  96   2              }
  97   1              while (head != NULL)
  98   1              {
  99   2                      if (head->ID == GTimerobj->ID) {
 100   3                              pre->next = head->next;
 101   3                              return 0;
 102   3                      }
 103   2                      pre  = head;
 104   2                      head = head->next;
 105   2              }
 106   1      
 107   1              return -1;
 108   1      }
 109          
 110          
 111          char GTimer_OBJRun (__GTimerOBJ* GTimerobj)
 112          {
 113   1              __GTimerOBJ*  head = GTimer_Head;
 114   1      
C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/08/2021 22:33:46 PAGE 3   

 115   1              while (head != NULL)
 116   1              {
 117   2                      if (head->ID == GTimerobj->ID) {
 118   3                              head->status = 2;
 119   3                              return 0;
 120   3                      }
 121   2                      head = head->next;
 122   2              }
 123   1              
 124   1              return -1;
 125   1      }
 126          
 127          char GTimer_OBJPause (__GTimerOBJ* GTimerobj)
 128          {
 129   1              __GTimerOBJ*  head = GTimer_Head;
 130   1      
 131   1              while (head != NULL)
 132   1              {
 133   2                      if (head->ID == GTimerobj->ID) {
 134   3                              head->status = 1;
 135   3                              return 0;
 136   3                      }
 137   2                      head = head->next;
 138   2              }
 139   1              
 140   1              return -1;
 141   1      }
 142          
 143          
 144          
 145          
 146          /* ------------------------------------------------------------ */
 147          
 148          
 149          
 150          
 151          
 152          
 153          
 154          
 155          
 156          
 157          
 158          
 159          
 160          
 161          
 162          #endif /* GTIMER_CONFIG */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    916    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
