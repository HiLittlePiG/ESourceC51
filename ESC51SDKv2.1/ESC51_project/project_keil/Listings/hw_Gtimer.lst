C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/11/2021 00:19:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HW_GTIMER
OBJECT MODULE PLACED IN .\Objects\hw_Gtimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\ESC51_sdk\HW_Support\hw_Gtimer.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,
                    -SPEED) BROWSE INCDIR(..\..\ESC51_sdk\es_sdkstatrt;..\..\ESC51_sdk\OFC_Driver\header;..\..\ESC51_sdk\HW_Support\header;..
                    -\..\ESC51_sdk\SW_Support\header;..\..\ESC51_project;..\..\ESC51_sdk) DEBUG OBJECTEXTEND PRINT(.\Listings\hw_Gtimer.lst) 
                    -OBJECT(.\Objects\hw_Gtimer.obj)

line level    source

   1          #include "hw_Gtimer.h"
   2          
   3          #ifdef GTIMER_CONFIG
              
              
              /* ------------------------------------------------------------ */
              
              static __GTimerOBJ    *GTimer_Head = NULL;
              
              
              
              
              
              
              static char GTimer_function (void *arg) 
              {
                      static __GTimerOBJ *head = NULL;
                      head = GTimer_Head;
                      while (head != NULL)
                      {
                              if (head->status == 2) {
                                      head->member_func_pointer(head->member_func_arg);
                              }
                              head = head->next;
                      }
              
                      return 0;
              }
              
              
              
              
              
              /* ------------------------------------------------------------ */
              
              void GTimer_Init (void)
              {
                      GTimer_Head = NULL;
                      Timer2Init(TIMER2_MODE_TIMING, 10000, GTimer_function);
              }
              
              void GTimer_Start (void)
              {
                      
              }
              
              void GTimer_Stop (void)
              {
                      
              }
              
              
C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/11/2021 00:19:20 PAGE 2   

              
              
              
              char GTimer_OBJJoin (__GTimerOBJ* GTimerobj)
              {
                      __GTimerOBJ* head = GTimer_Head;
              
                      if (GTimer_Head == NULL) {
                              GTimerobj->ID     = 0;
                              GTimerobj->status = 1;
                              GTimerobj->next   = NULL;
                              GTimer_Head       = GTimerobj;
                              return 0;
                      }
                      while (head->next != NULL)
                      {
                              head = head->next;
                      }
                      GTimerobj->ID     = head->ID + 1;
                      GTimerobj->status = 1;
                      GTimerobj->next   = NULL;
                      head->next        = GTimerobj;
              
                      return 0;
              }
              
              
              
              char GTimer_OBJRemove (__GTimerOBJ* GTimerobj)
              {
                      __GTimerOBJ* head = GTimer_Head;
                      __GTimerOBJ* pre  = GTimer_Head;
              
                      if (GTimer_Head == NULL) {
                              return -1;
                      } else if (GTimer_Head->ID == GTimerobj->ID) {
                              GTimer_Head = GTimer_Head->next;
                              return 0;
                      } else {
                              pre  = head;
                              head = head->next;
                      }
                      while (head != NULL)
                      {
                              if (head->ID == GTimerobj->ID) {
                                      pre->next = head->next;
                                      return 0;
                              }
                              pre  = head;
                              head = head->next;
                      }
              
                      return -1;
              }
              
              
              char GTimer_OBJRun (__GTimerOBJ* GTimerobj)
              {
                      __GTimerOBJ*  head = GTimer_Head;
              
                      while (head != NULL)
                      {
C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/11/2021 00:19:20 PAGE 3   

                              if (head->ID == GTimerobj->ID) {
                                      head->status = 2;
                                      return 0;
                              }
                              head = head->next;
                      }
                      
                      return -1;
              }
              
              char GTimer_OBJPause (__GTimerOBJ* GTimerobj)
              {
                      __GTimerOBJ*  head = GTimer_Head;
              
                      while (head != NULL)
                      {
                              if (head->ID == GTimerobj->ID) {
                                      head->status = 1;
                                      return 0;
                              }
                              head = head->next;
                      }
                      
                      return -1;
              }
              
              
              
              
              /* ------------------------------------------------------------ */
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              #endif /* GTIMER_CONFIG */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
