C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/17/2021 11:59:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HW_GTIMER
OBJECT MODULE PLACED IN .\Objects\hw_Gtimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\ESC51_sdk\HW_Support\hw_Gtimer.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,
                    -SPEED) BROWSE INCDIR(..\..\ESC51_sdk\es_sdkstatrt;..\..\ESC51_sdk\OFC_Driver\header;..\..\ESC51_sdk\HW_Support\header;..
                    -\..\ESC51_sdk\SW_Support\header;..\..\ESC51_project;..\..\ESC51_sdk) DEBUG OBJECTEXTEND PRINT(.\Listings\hw_Gtimer.lst) 
                    -OBJECT(.\Objects\hw_Gtimer.obj)

line level    source

   1          #include "hw_Gtimer.h"
   2          
   3          #ifdef GTIMER_CONFIG
   4          
   5          
   6          /* ------------------------------------------------------------ */
   7          
   8          static __GTimerOBJ    *GTimer_Head = NULL;
   9          
  10          
  11          
  12          
  13          
  14          
  15          static char GTimer_function (void *arg) 
  16          {
  17   1              static __GTimerOBJ *head = NULL;
  18   1              head = GTimer_Head;
  19   1              while (head != NULL)
  20   1              {
  21   2                      if (head->status == 2) {
  22   3                              head->member_func_pointer(head->member_func_arg);
  23   3                      }
  24   2                      head = head->next;
  25   2              }
  26   1      
  27   1              return 0;
  28   1      }
  29          
  30          
  31          
  32          
  33          
  34          /* ------------------------------------------------------------ */
  35          
  36          void GTimer_Init (void)
  37          {
  38   1              GTimer_Head = NULL;
  39   1              Timer2Init(TIMER2_MODE_TIMING, 10000, GTimer_function);
  40   1      }
  41          
  42          void GTimer_Start (void)
  43          {
  44   1              
  45   1      }
  46          
  47          void GTimer_Stop (void)
  48          {
  49   1              
  50   1      }
  51          
  52          
C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/17/2021 11:59:47 PAGE 2   

  53          
  54          
  55          
  56          char GTimer_OBJJoin (__GTimerOBJ* GTimerobj)
  57          {
  58   1              __GTimerOBJ* head = GTimer_Head;
  59   1      
  60   1              if (GTimer_Head == NULL) {
  61   2                      GTimerobj->ID     = 0;
  62   2                      GTimerobj->status = 1;
  63   2                      GTimerobj->next   = NULL;
  64   2                      GTimer_Head       = GTimerobj;
  65   2                      return 0;
  66   2              }
  67   1              while (head->next != NULL)
  68   1              {
  69   2                      head = head->next;
  70   2              }
  71   1              GTimerobj->ID     = head->ID + 1;
  72   1              GTimerobj->status = 1;
  73   1              GTimerobj->next   = NULL;
  74   1              head->next        = GTimerobj;
  75   1      
  76   1              return 0;
  77   1      }
  78          
  79          
  80          
  81          char GTimer_OBJRemove (__GTimerOBJ* GTimerobj)
  82          {
  83   1              __GTimerOBJ* head = GTimer_Head;
  84   1              __GTimerOBJ* pre  = GTimer_Head;
  85   1      
  86   1              if (GTimer_Head == NULL) {
  87   2                      return -1;
  88   2              } else if (GTimer_Head->ID == GTimerobj->ID) {
  89   2                      GTimer_Head = GTimer_Head->next;
  90   2                      return 0;
  91   2              } else {
  92   2                      pre  = head;
  93   2                      head = head->next;
  94   2              }
  95   1              while (head != NULL)
  96   1              {
  97   2                      if (head->ID == GTimerobj->ID) {
  98   3                              pre->next = head->next;
  99   3                              return 0;
 100   3                      }
 101   2                      pre  = head;
 102   2                      head = head->next;
 103   2              }
 104   1      
 105   1              return -1;
 106   1      }
 107          
 108          
 109          char GTimer_OBJRun (__GTimerOBJ* GTimerobj)
 110          {
 111   1              __GTimerOBJ*  head = GTimer_Head;
 112   1      
 113   1              while (head != NULL)
 114   1              {
C51 COMPILER V9.60.0.0   HW_GTIMER                                                         07/17/2021 11:59:47 PAGE 3   

 115   2                      if (head->ID == GTimerobj->ID) {
 116   3                              head->status = 2;
 117   3                              return 0;
 118   3                      }
 119   2                      head = head->next;
 120   2              }
 121   1              
 122   1              return -1;
 123   1      }
 124          
 125          char GTimer_OBJPause (__GTimerOBJ* GTimerobj)
 126          {
 127   1              __GTimerOBJ*  head = GTimer_Head;
 128   1      
 129   1              while (head != NULL)
 130   1              {
 131   2                      if (head->ID == GTimerobj->ID) {
 132   3                              head->status = 1;
 133   3                              return 0;
 134   3                      }
 135   2                      head = head->next;
 136   2              }
 137   1              
 138   1              return -1;
 139   1      }
 140          
 141          
 142          
 143          
 144          /* ------------------------------------------------------------ */
 145          
 146          
 147          
 148          
 149          
 150          
 151          
 152          
 153          
 154          
 155          
 156          
 157          
 158          
 159          
 160          #endif /* GTIMER_CONFIG */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    916    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
