C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      07/17/2021 11:59:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SW_SOFTTIMER
OBJECT MODULE PLACED IN .\Objects\sw_SoftTimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\ESC51_sdk\SW_Support\sw_SoftTimer.c LARGE WARNINGLEVEL(1) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\..\ESC51_sdk\es_sdkstatrt;..\..\ESC51_sdk\OFC_Driver\header;..\..\ESC51_sdk\HW_Support\header
                    -;..\..\ESC51_sdk\SW_Support\header;..\..\ESC51_project;..\..\ESC51_sdk) DEBUG OBJECTEXTEND PRINT(.\Listings\sw_SoftTimer
                    -.lst) OBJECT(.\Objects\sw_SoftTimer.obj)

line level    source

   1          #include "sw_SoftTimer.h"
   2          
   3          #ifdef SW_SOFTTIMER_CONFIG
   4          
   5          
   6          
   7          
   8          
   9          
  10          /* ------------------------------------------------------------ */
  11          
  12          
  13          
  14          static __SOFTTimerOBJ   *__stimerobj_head = NULL;
  15          
  16          
  17          /* ------------------------------------------------------------ */
  18          
  19          
  20          static void SOFTTimer_callback (void *arg)
  21          {
  22   1              static __SOFTTimerOBJ *head = NULL;
  23   1              head = __stimerobj_head;
  24   1      
  25   1              while (head != NULL)
  26   1              {
  27   2                      if (head->status == 2) {
  28   3                              head->SoftTimer_obj_remain_ms--;
  29   3                              if (head->SoftTimer_obj_remain_ms == 0) {
  30   4                                      head->SoftTimer_obj_remain_ms = head->SoftTimer_obj_ms;
  31   4                                      head->SoftTimer_obj_func(head->SoftTimer_obj_arg);
  32   4                              }
  33   3                      }
  34   2                      head = head->next;
  35   2              }
  36   1      
  37   1      }
  38          
  39          
  40          
  41          
  42          
  43          /* ------------------------------------------------------------ */
  44          GTIMER_OBJ_DECL_STATIC(ST_GTimer);
  45          
  46          
  47          void SOFTTimer_Init(void)
  48          {
  49   1              GTIMER_OBJ_INIT_STATIC(ST_GTimer, SOFTTimer_callback, NULL);
  50   1              GTIMER_OBJ_JOIN(ST_GTimer);
  51   1      }
  52          
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      07/17/2021 11:59:47 PAGE 2   

  53          void SOFTTimer_Start(void)
  54          {
  55   1      
  56   1              GTIMER_OBJ_RUN(ST_GTimer);
  57   1      
  58   1      }
  59          
  60          void SOFTTimer_Stop(void)
  61          {
  62   1      
  63   1              GTIMER_OBJ_PAUSE(ST_GTimer);
  64   1      
  65   1      }
  66          
  67          
  68          
  69          
  70          /* ------------------------------------------------------------ */
  71          
  72          
  73          
  74          
  75          
  76          
  77          char SOFTTimer_OBJJoin(__SOFTTimerOBJ* pobj)
  78          {
  79   1              __SOFTTimerOBJ *head = __stimerobj_head;
  80   1              
  81   1              if (__stimerobj_head == NULL) {
  82   2                      pobj->ID         = 0;
  83   2                      pobj->status     = 1;
  84   2                      pobj->next       = NULL;
  85   2                      __stimerobj_head = pobj;
  86   2                      return 0;
  87   2              }
  88   1              while (head->next != NULL)
  89   1              {
  90   2                      head = head->next;
  91   2              }
  92   1              pobj->ID      = head->ID + 1;
  93   1              pobj->status  = 1;
  94   1              pobj->next    = NULL;
  95   1              head->next    = pobj;
  96   1      
  97   1              return 0;
  98   1      }
  99          
 100          char SOFTTimer_OBJRemove(__SOFTTimerOBJ* pobj)
 101          {
 102   1              
 103   1              __SOFTTimerOBJ *head = __stimerobj_head;
 104   1              __SOFTTimerOBJ *pre  = __stimerobj_head;
 105   1      
 106   1              if (__stimerobj_head == NULL) {
 107   2                      return -1;
 108   2              } else if (__stimerobj_head->ID == pobj->ID) {
 109   2                      __stimerobj_head = __stimerobj_head->next;
 110   2                      return 0;
 111   2              } else {
 112   2                      pre  = head;
 113   2                      head = head->next;
 114   2              }
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      07/17/2021 11:59:47 PAGE 3   

 115   1              while (head != NULL)
 116   1              {
 117   2                      if (head->ID == pobj->ID) {
 118   3                              pre->next = head->next;
 119   3                              return 0;
 120   3                      }
 121   2                      pre  = head;
 122   2                      head = head->next;
 123   2              }
 124   1      
 125   1              return -1;
 126   1      }
 127          
 128          char SOFTTimer_OBJPause(__SOFTTimerOBJ* pobj)
 129          {
 130   1              __SOFTTimerOBJ*  head = __stimerobj_head;
 131   1      
 132   1              while (head != NULL)
 133   1              {
 134   2                      if (head->ID == pobj->ID) {
 135   3                              head->status = 1;
 136   3                              return 0;
 137   3                      }
 138   2                      head = head->next;
 139   2              }
 140   1              
 141   1              return -1;
 142   1      }
 143          
 144          char SOFTTimer_OBJRun(__SOFTTimerOBJ* pobj)
 145          {
 146   1              __SOFTTimerOBJ*  head = __stimerobj_head;
 147   1      
 148   1              while (head != NULL)
 149   1              {
 150   2                      if (head->ID == pobj->ID) {
 151   3                              head->status = 2;
 152   3                              return 0;
 153   3                      }
 154   2                      head = head->next;
 155   2              }
 156   1              
 157   1              return -1;
 158   1      }
 159          
 160          
 161          char SOFTTimer_OBJSet(__SOFTTimerOBJ* pobj, int delms)
 162          {
 163   1              __SOFTTimerOBJ*  head = __stimerobj_head;
 164   1      
 165   1              while (head != NULL)
 166   1              {
 167   2                      if (head->ID == pobj->ID) {
 168   3                              head->SoftTimer_obj_ms        = delms/10;
 169   3                              head->SoftTimer_obj_remain_ms = delms/10;
 170   3                              return 0;
 171   3                      }
 172   2                      head = head->next;
 173   2              }
 174   1      
 175   1              return -1;
 176   1      }
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      07/17/2021 11:59:47 PAGE 4   

 177          
 178          
 179          /* ------------------------------------------------------------ */
 180          
 181          #endif /* SW_SOFTTIMER_CONFIG */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1151    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     17      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
